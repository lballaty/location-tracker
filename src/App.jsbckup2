import React, { useState, useEffect } from 'react';
import { saveLocation, getLocations } from './db';

function App() {
  const [location, setLocation] = useState(null); // Current location
  const [tracking, setTracking] = useState(false); // Tracking state
  const [locationHistory, setLocationHistory] = useState([]); // Location history

  // Load location history when the component mounts
  useEffect(() => {
    async function loadHistory() {
      const history = await getLocations();
      setLocationHistory(history);
    }
    loadHistory();
  }, []);

  // Handle location tracking
  useEffect(() => {
    let watchId;

    if (tracking) {
      watchId = navigator.geolocation.watchPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;
          const newLocation = { latitude, longitude };
          setLocation(newLocation);
          await saveLocation(newLocation); // Save location to the database
          const updatedHistory = await getLocations(); // Refresh history
          setLocationHistory(updatedHistory);
        },
        (error) => {
          console.error('Error fetching location:', error);
        },
        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
      );
    }

    return () => {
      if (watchId) navigator.geolocation.clearWatch(watchId);
    };
  }, [tracking]);

  return (
    <div>
      <h1>Location Tracker</h1>
      <button onClick={() => setTracking(!tracking)}>
        {tracking ? 'Stop Tracking' : 'Start Tracking'}
      </button>
      {location && (
        <p>
          Current Location: {location.latitude}, {location.longitude}
        </p>
      )}
      <h2>Location History</h2>
      <ul>
        {locationHistory.map((loc, index) => (
          <li key={index}>
            {loc.latitude}, {loc.longitude} - {new Date(loc.timestamp).toLocaleTimeString()}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
